library(shiny); runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='berdin',
token='0311CBE9DB1141983ED45C4065AAE513',
secret='wcPl5p5JAqxbGSrQgG7zny3HLT1AnbQb5AdZY6Mr')
rsconnect::setAccountInfo(name='berdin',
token='0311CBE9DB1141983ED45C4065AAE513',
secret='wcPl5p5JAqxbGSrQgG7zny3HLT1AnbQb5AdZY6Mr')
rsconnect::deployApp('C:\Users\user\Documents\Business Analytics\Online Retail Dashboard')
library(shiny); runApp('Online Retail Dashboard.R')
rsconnect::deployApp('C:\Users\user\Documents\Business Analytics')
library(shiny)
library(shinydashboard)
library(DT)
library(ggplot2)
library(dplyr)
library(readxl)
library(plotly)
library(maps)
library(scales)
library(lubridate)
# Load data
data <- read_excel("Online Retail.xlsx")
# Data preprocessing
data <- data %>%
mutate(InvoiceDate = as.Date(InvoiceDate, format = "%Y-%m-%d %H:%M:%S")) %>%
filter(!is.na(CustomerID))
# Preprocess revenue by country data
revenue_country <- data %>%
group_by(Country) %>%
summarize(TotalRevenue = sum(Quantity * UnitPrice)) %>%
arrange(desc(TotalRevenue))
# Load country codes for plotting
country_codes <- map_data("world")
# Join revenue data with country codes
revenue_map_data <- left_join(country_codes, revenue_country, by = c("region" = "Country"))
# Define UI
ui <- dashboardPage(
dashboardHeader(title = "Online Retail Dashboard", titleWidth = 350),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Data Table", tabName = "data_table", icon = icon("table")),
menuItem("Analysis", tabName = "analysis", icon = icon("chart-line")),
menuItem("About", tabName = "about", icon = icon("info-circle"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "dashboard",
fluidRow(
box(title = "Total Sales", status = "primary", solidHeader = TRUE, width = 4,
h3(textOutput("total_sales")),
icon = icon("chart-line", lib = "glyphicon")
),
box(title = "Total Customers", status = "primary", solidHeader = TRUE, width = 4,
h3(textOutput("total_customers")),
icon = icon("user", lib = "glyphicon")
),
box(title = "Total Invoices", status = "primary", solidHeader = TRUE, width = 4,
h3(textOutput("total_invoices")),
icon = icon("file-text", lib = "glyphicon")
)
),
fluidRow(
box(title = "Sales Over Time", status = "primary", solidHeader = TRUE, width = 12,
plotlyOutput("sales_over_time")
)
),
fluidRow(
box(title = "Top Selling Products", status = "primary", solidHeader = TRUE, width = 6,
selectInput("product_number", "Number of Products:", choices = c(5, 10, 15), selected = 10),
DTOutput("top_selling_products_table")
),
box(title = "Top Customers", status = "primary", solidHeader = TRUE, width = 6,
selectInput("customer_number", "Number of Customers:", choices = c(5, 10, 15), selected = 10),
DTOutput("top_customers_table")
)
)
),
tabItem(tabName = "data_table",
fluidRow(
box(title = "Data Table", status = "primary", solidHeader = TRUE, width = 12,
DTOutput("data_table")
)
)
),
tabItem(tabName = "analysis",
fluidRow(
box(title = "Monthly Sales Trend", status = "primary", solidHeader = TRUE, width = 6,
plotlyOutput("monthly_sales_trend_plot")
),
box(title = "Average Order Value by Country", status = "primary", solidHeader = TRUE, width = 6,
plotlyOutput("average_order_value_country_plot")
)
),
fluidRow(
box(title = "Revenue by Country", status = "primary", solidHeader = TRUE, width = 6,
plotlyOutput("revenue_by_country_plot")
),
box(title = "Sales Distribution by Customer", status = "primary", solidHeader = TRUE, width = 6,
plotlyOutput("sales_distribution_customer_plot")
)
)
),
tabItem(tabName = "about",
fluidRow(
box(title = "About This Dashboard", status = "primary", solidHeader = TRUE, width = 12,
p("Welcome to the Online Retail Dashboard. This interactive dashboard is designed to provide comprehensive insights into the Online Retail dataset, which has been obtained from the UCI Machine Learning Repository. The dataset includes transactions from 01/12/2010 to 09/12/2011 for a UK-based and registered non-store online retail company."),
p("The dashboard is structured into several tabs, each serving a unique purpose:"),
tags$ul(
tags$li(strong("Dashboard:"), " This tab presents key performance indicators (KPIs) such as Total Sales, Total Customers, and Total Invoices. It also includes visualizations for sales trends over time, top-selling products, and top customers. These metrics provide an at-a-glance view of the business's performance."),
tags$li(strong("Data Table:"), " This tab offers a detailed view of the raw data used for analysis. Users can explore the data, filter specific records, and gain deeper insights into individual transactions."),
tags$li(strong("Analysis:"), " This tab includes advanced analysis and visualizations. Users can explore monthly sales trends, revenue distribution by country, average order value by country, and sales distribution by customer. These analyses help identify patterns, trends, and opportunities for business growth."),
tags$li(strong("About:"), " This tab provides information about the dashboard's purpose, data sources, and usage instructions.")
),
p("The main objectives of this dashboard are to facilitate understanding of sales trends, customer behavior, and overall business performance in the online retail sector. By analyzing various aspects such as total sales, customer distribution, top-selling products, and revenue by country, stakeholders can gain valuable insights into the dynamics of the online retail business."),
p("This dashboard is designed for stakeholders, analysts, and decision-makers in the e-commerce industry. It helps in making data-driven decisions, optimizing marketing strategies, and enhancing customer experience. The interactive visualizations allow users to drill down into specific metrics, identify trends, and uncover insights that can drive business growth."),
)
)
)
)
),
skin = "blue"  # Apply a blue skin to the dashboard
)
# Define server logic
server <- function(input, output) {
output$total_sales <- renderText({
total_sales <- sum(data$Quantity * data$UnitPrice, na.rm = TRUE)
paste("£", format(round(total_sales, 2), big.mark = ","))
})
output$total_customers <- renderText({
total_customers <- n_distinct(data$CustomerID)
total_customers
})
output$total_invoices <- renderText({
total_invoices <- n_distinct(data$InvoiceNo)
total_invoices
})
output$sales_over_time <- renderPlotly({
sales_data <- data %>%
group_by(InvoiceDate) %>%
summarize(DailySales = sum(Quantity * UnitPrice, na.rm = TRUE))
p <- ggplot(sales_data, aes(x = InvoiceDate, y = DailySales)) +
geom_line(color = "skyblue") +
labs(title = "Sales Over Time", x = "Date", y = "Sales (£)") +
theme_minimal()
ggplotly(p)
})
output$data_table <- renderDT({
datatable(data)
})
output$top_selling_products_table <- renderDT({
req(input$product_number)  # Ensure input is not NA
top_products <- data %>%
group_by(Description) %>%
summarize(QuantitySold = sum(Quantity)) %>%
arrange(desc(QuantitySold)) %>%
head(as.numeric(input$product_number))  # Convert input to numeric
datatable(top_products)
})
output$top_customers_table <- renderDT({
req(input$customer_number)  # Ensure input is not NA
top_customers <- data %>%
group_by(CustomerID) %>%
summarize(TotalSales = sum(Quantity * UnitPrice)) %>%
arrange(desc(TotalSales)) %>%
head(as.numeric(input$customer_number))  # Convert input to numeric
datatable(top_customers)
})
output$monthly_sales_trend_plot <- renderPlotly({
monthly_sales <- data %>%
mutate(Month = floor_date(InvoiceDate, "month")) %>%
group_by(Month) %>%
summarize(MonthlySales = sum(Quantity * UnitPrice, na.rm = TRUE))
p <- ggplot(monthly_sales, aes(x = Month, y = MonthlySales)) +
geom_line(color = "skyblue") +
labs(x = "Month", y = "Sales (£)") +
theme_minimal()
ggplotly(p)
})
output$average_order_value_country_plot <- renderPlotly({
avg_order_value <- data %>%
group_by(Country) %>%
summarize(AverageOrderValue = mean(Quantity * UnitPrice, na.rm = TRUE)) %>%
arrange(desc(AverageOrderValue))
p <- ggplot(avg_order_value, aes(x = reorder(Country, -AverageOrderValue), y = AverageOrderValue, fill = Country)) +
geom_bar(stat = "identity") +
labs(x = "Country", y = "Average Order Value (£)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(p)
})
output$revenue_by_country_plot <- renderPlotly({
p <- ggplot(revenue_map_data, aes(x = long, y = lat, group = group, fill = TotalRevenue, text = paste("Country:", region, "<br>Revenue: £", scales::comma(TotalRevenue)))) +
geom_polygon(color = "white") +
scale_fill_continuous(low = "lightblue", high = "darkblue", na.value = "grey50", labels = scales::comma, guide = "colorbar") +
labs(fill = "Revenue (£)") +
theme_void() +
theme(legend.position = "bottom")
ggplotly(p, tooltip = "text")
})
output$sales_distribution_customer_plot <- renderPlotly({
sales_distribution <- data %>%
group_by(CustomerID) %>%
summarize(TotalSales = sum(Quantity * UnitPrice))
p <- ggplot(sales_distribution, aes(x = TotalSales)) +
geom_density(fill = "skyblue", alpha = 0.7) +
labs(x = "Total Sales (£)", y = "Density") +
scale_x_continuous(labels = scales::comma) +
theme_minimal()
ggplotly(p)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(rsconnect)
rsconnect::deployApp('C:\Users\user\Documents\Business Analytics')
library(shiny); runApp('Online Retail Dashboard.R')
library(shiny); runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
library(shiny); runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
library(shiny); runApp('Online Retail Dashboard.R')
library(shiny); runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
library(shiny); runApp('Online Retail Dashboard.R')
runApp('Online Retail Dashboard.R')
